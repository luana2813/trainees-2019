swagger: "2.0"
info:
  description: "This is a digital film server."
  version: "1.0.0"
  title: "API Films"
  termsOfService: "http://swagger.io/terms/"
  contact: 
    email: "luana.oliveira@soaexpert.com.br"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/license/LICENSE-2.0.html"
host: "luabank.swagger.io"
basePath: "/api/v1"
consumes:
- "application/json"
produces:
- "application/json"
schemes:
- "https"
paths:
  /health:
    get:
      summary: "Application healthcheck routes"
      operationId: "heath"
      responses:
        200:
          description: "API funcionando"
          schema:
            properties:
              version:
                type: string
              environment:
                type: string
  
  /films:
    post:
      summary: "register a movie"
      operationId: "registerMovie"
      parameters:
        - in: "body"
          name: "register"
          required: true
          schema:
            $ref: "#/definitions/Films"
      responses: 
        201:
          description: "Successfully created movie"
          schema:
            $ref: "#/definitions/Film"
        400:
          description: "Invalid values supplied"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Unmapped error"
          schema:
            $ref: "#/definitions/ResponseError"
            
  /films/{id}:
    get:
      summary: "Consult film by id"
      operationId: "consultFilm"
      parameters:
      - $ref: "#/parameters/Film"
      responses:
        200:
          description: "Consult successful"
          schema:
            $ref: "#/definitions/Film"
        402:
          description: "This movie needs a payment required"
          schema:
            $ref: "#/definitions/ResponseError"
        404:
          description: "Movie not found by this ID"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Unmapped error"
          schema:
            $ref: "#/definitions/ResponseError"
    
    put:
      summary: "Update film"
      operationId: "updateFilm"
      parameters:
      - $ref: "#/parameters/Film"
      responses:
        200:
          description: "Movie successfully updated"
          schema:
            $ref: "#/definitions/Film"
    
    patch:
      summary: "Slight change on film" 
      operationId: "changeFilm" 
      parameters:
      - $ref: "#/parameters/Film"
      responses:
        200:
          description: "Successfully changed film"
        404:
          description: "Film not found by this ID"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Unmapped error"
          schema:
            $ref: "#/definitions/ResponseError"
    
    delete:
      summary: "Delete a movie"
      operationId: "deleteMovie"
      parameters:
      - $ref: "#/parameters/Film"
      responses:
        200:
          description: "Successfully deleted film"
  
  /films/artists:
    post:
      summary: "Adding a new artist"
      operationId: "registerArtist"
      parameters:
        - in: "body"
          name: "artist"
          required: true
          schema: 
            $ref: "#/definitions/Artists"
      responses:
        200:
          description: "Successfully created artist"
    
    get:
      summary: "Consult cast"
      operationId: "consultCast"
      parameters:
      - $ref: "#/parameters/Cast"
      responses:
        200:
          description: "Successfull consult cast"
          schema:
            $ref: "#/definitions/Cast"
  
  /films/artists/{id}:
    get:
      summary: "Consult artist by ID"
      operationId: "consultArtist"
      parameters:
      - $ref: "#/parameters/Artist"
      responses:
        200:
          description: "Consult successfull"
          schema:
            $ref: "#/definitions/Artist"
        404:
          description: "Artist not found by this ID"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Unmapped error"
          schema:
            $ref: "#/definitions/ResponseError"
    put:
      summary: "Update artist"
      operationId: "updateArtist"
      parameters:
      - $ref: "#/parameters/Artist"
      responses:
        200:  
          description: "Successfully updated artist"
          schema:
            $ref: "#/definitions/Artist"
    
    patch:
      summary: "Slight change in artist" 
      operationId: "changeArtist" 
      parameters:
      - $ref: "#/parameters/Artist"
      responses:
        200:
          description: "Successfully changed artist"
        404:
          description: "Artist not found by this ID"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Unmapped error"
          schema:
            $ref: "#/definitions/ResponseError"  
  
    delete:
      summary: "Delete artist" 
      operationId: "deleteArtist"
      parameters: 
      - $ref: "#/parameters/Film"
      responses:
        200:
          description: "Successefully deleted artist"
    
  /genres:
    post:
      summary: "Registers genres"
      operationId: "registerGenres"
      parameters:
      - in: "body"
        name: "genres"
        required: true
        schema:
          $ref: "#/definitions/Genres"
      responses:
        200:
          description: "Successfully registered genres"
          schema:
            $ref: "#/definitions/Genres"
  
  /genres/{id}:
    get:
      summary: "Consult genre by genres"
      operationId: "consultGenres"
      parameters:
      - $ref: "#/parameters/Genres"
      responses:
        200:
          description: "Successfull consulted genre"
          schema:
            $ref: "#/definitions/Genres"
        404:
          description: "Genre not found by this ID"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Unmapped error"
          schema:
            $ref: "#/definitions/ResponseError"
    
    put:
      summary: "Update genres"
      operationId: "updateGenres"
      parameters:
      - $ref: "#/parameters/Genres"
      responses:
        200:
          description: "Successfully updated genres"
          schema:
            $ref: "#/definitions/Genres"
        404:
          description: "Movie not found by this ID"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Unmapped error"
          schema:
            $ref: "#/definitions/ResponseError"
    patch:
      summary: "Slight change in gender" 
      operationId: "changeGenre" 
      parameters:
      - $ref: "#/parameters/Genres"
      responses:
        200:
          description: "Successfully changed genre"
        404:
          description: "Movie not found by this ID"
          schema:
            $ref: "#/definitions/ResponseError"
        500:
          description: "Unmapped error"
          schema:
            $ref: "#/definitions/ResponseError"
    
    delete:
      summary: "Delete genre" 
      operationId: "deleteGenre"
      parameters:
      - $ref: "#/parameters/Genres"
      responses:
        200:
          description: "Successfully deleted genre"
    
  /films/{artist}/filmography:
    get:
      summary: "Consult filmography"
      operationId: "filmography"
      parameters:
      - $ref: "#/parameters/artist"
      responses:
        200:
          description: "Successfull consult"
          schema:
            $ref: "#/definitions/Filmography"
            
  
definitions:
  Films:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      title: 
        type: "string"
      releaseYear:
        type: "string"
        format: "date"
      cast:
        $ref: "#/definitions/Cast"
      genres:
        type: "string"
      director:
        $ref: "#/definitions/Director"
  
  Film:
    type: "object"
    properties:
      title: 
        type: "string"
      releaseYear:
        type: "string"
        format: "date"
      cast:
        $ref: "#/definitions/Cast"
      genres:
        type: "string"
      director:
        $ref: "#/definitions/Director"  
  
  Artists:
    type: "object"
    properties:
      id:
        type: "number"
        format: "int32"
      name:
        type: "string"
      age: 
        type: "number"
      nationality:
        type: "string"
      charaterName:
        type: "string"
  
  Artist:
    type: "object"
    properties:
      name:
        type: "string"
      age:
        type: "number"
      nationality:
        type: "string"
      charaterName:
        type: "string"

  Director:
    type: "object"
    properties:
      id:
        type: "number"
        format: "int32"
      name: 
        type: "string"
      age:
        type: "number"
      dateBirth:
        type: "string"
        format: "date-time"

  Cast:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "number"
          format: "int32"
        artists:
          $ref: "#/definitions/Artists"
        director:
          $ref: "#/definitions/Director"
 
  Genres:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "number"
          format: "int32"
        genres:
          type: "string"
  
  ResponseError:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      messages:
        type: "array"
        items:
          type: "string"
      cause:
        type: "object"
        properties:
          name:
            type: "string"
          code:
            type: "number"
          message:
            type: "string"
  
  Filmography:
    type: "object"
    properties:
      films:
        $ref: "#/definitions/Film"
      
  
parameters:
  Film:
    in: "path"
    name: "id"
    type: "string"
    required: true
  
  Artist:
    in: "path"
    name: "id"
    type: "string"
    required: true
    
  artist:
    in: "path"
    name: "artist"
    type: "string"
    required: true
  
  Cast:
    in: path
    name: "cast"
    type: "string"
    required: true
    
  Genres:
    in: "path"
    name: "id"
    type: "string"
    required: true

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
        
        
        
    